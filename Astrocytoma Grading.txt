<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Astrocytoma Grading</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f5f8fa;
        }
        .image-preview {
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .upload-form {
            background-color: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 0 10px rgba(0,0,0,0.05);
            margin-bottom: 30px;
        }
        .prediction-box {
            background-color: #fff;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            transition: transform 0.2s;
        }
        .prediction-box:hover {
            transform: scale(1.02);
        }
    </style>
</head>
<body>
    <div class="container py-5">
        <h2 class="text-center mb-4 text-primary">Astrocytoma Grading</h2>

        <form method="POST" enctype="multipart/form-data" class="upload-form">
            <div class="mb-3">
                <label for="file" class="form-label">Upload Astrocytoma Images</label>
                <input type="file" class="form-control" name="file" multiple accept="image/*" required>
            </div>
            <button type="submit" class="btn btn-primary w-100">Upload and Predict</button>
        </form>

        {% if predictions %}
            <h3 class="mb-4">Predictions:</h3>
            <div class="row">
                {% for image, label, confidence in predictions %}
                    <div class="col-md-4 col-sm-6">
                        <div class="prediction-box text-center">
                            <img src="{{ url_for('static', filename='uploads/' ~ image) }}" width="100%" class="image-preview mb-2" alt="Image">
                            <h5 class="fw-bold">{{ image }}</h5>
                            <p class="mb-1">Prediction: <span class="text-success fw-semibold">{{ label }}</span></p>
                            <p class="text-muted">Confidence: {{ confidence }}</p>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% endif %}
    </div>
</body>
</html>



from flask import Flask, render_template, request
import torch
import torchvision.transforms as transforms
from PIL import Image
import os
import torchvision.models as models
import torch.nn as nn

app = Flask(__name__)
UPLOAD_FOLDER = 'static/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Model Setup
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = models.inception_v3(weights=None, aux_logits=True)
model.fc = nn.Linear(model.fc.in_features, 4)
model.load_state_dict(torch.load("InceptionV3_astrocytoma_20_epoch.pth", map_location=device))
model.eval().to(device)

transform = transforms.Compose([
    transforms.Resize((299, 299)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])

labels = ['Grade I', 'Grade II', 'Grade III', 'Grade IV']

@app.route('/', methods=['GET', 'POST'])
def index():
    predictions = []

    # Clean previous uploads before new upload
    for f in os.listdir(UPLOAD_FOLDER):
        os.remove(os.path.join(UPLOAD_FOLDER, f))

    if request.method == 'POST':
        files = request.files.getlist('file')
        for file in files:
            if file:
                # Save the uploaded file
                file_path = os.path.join(app.root_path, UPLOAD_FOLDER, file.filename)
                file.save(file_path)

                # Process the image
                image = Image.open(file_path).convert('RGB')
                image_tensor = transform(image).unsqueeze(0).to(device)

                with torch.no_grad():
                    outputs = model(image_tensor)
                    probs = torch.nn.functional.softmax(outputs, dim=1)
                    confidence, predicted = torch.max(probs, 1)
                    label = labels[predicted.item()]
                    conf_percent = f"{confidence.item()*100:.2f}%"
                    predictions.append((file.filename, label, conf_percent))

    return render_template('index.html', predictions=predictions)

if __name__ == '__main__':
    app.run(debug=True)
